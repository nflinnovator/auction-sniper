/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package auction.sniper;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.SwingUtilities;

import org.jivesoftware.smack.Chat;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;

import auction.sniper.ui.MainWindow;
import auction.sniper.ui.SnipersTableModel;
import auction.sniper.ui.UserRequestListener;

public class App {

	private static final int ARG_HOSTNAME = 0;
	private static final int ARG_USERNAME = 1;
	private static final int ARG_PASSWORD = 2;

	public static final String AUCTION_RESOURCE = "Auction";
	public static final String ITEM_ID_AS_LOGIN = "auction-%s";
	public static final String AUCTION_ID_FORMAT = ITEM_ID_AS_LOGIN + "@%s/" + AUCTION_RESOURCE;

	public static final String JOIN_COMMAND_FORMAT = "SOLVersion: 1.1; Command: JOIN;";
	public static final String BID_COMMAND_FORMAT = "SOLVersion: 1.1; Command: BID; Price: %d;";
	public static final String MAIN_WINDOW_NAME = "Auction Sniper App";

	private final SnipersTableModel snipers = new SnipersTableModel();

	private MainWindow ui;

	private List<Chat> notToBeGCd = new ArrayList<>();;

	App() throws Exception {
		startUserInterface();
	}
 
	public static void main(String... args) throws Exception {
		App app = new App();
		XMPPConnection connection = connection(args[ARG_HOSTNAME], args[ARG_USERNAME], args[ARG_PASSWORD]);
		app.disconnectWhenUICloses(connection);
		app.addUserRequestListenerFor(connection);
	}

	private void addUserRequestListenerFor(final XMPPConnection connection) {
		ui.addUserRequestListener(new UserRequestListener() {
			@Override
			public void joinAuction(String itemId) {
				snipers.addSniper(SniperSnapshot.joining(itemId));
				Chat chat = connection.getChatManager().createChat(auctionId(itemId, connection), null);
				notToBeGCd.add(chat);
				Auction auction = new XMPPAuction(chat);
				chat.addMessageListener(new AuctionMessageTranslator(connection.getUser(),
						new AuctionSniper(itemId, auction, new SwingThreadSniperListener(snipers))));
				auction.join();
			}
		});
	}

	private static XMPPConnection connection(String hostname, String username, String password) throws XMPPException {
		XMPPConnection connection = new XMPPConnection(hostname);
		connection.connect();
		connection.login(username, password, AUCTION_RESOURCE);
		return connection;
	}

	private static String auctionId(String itemId, XMPPConnection connection) {
		return String.format(AUCTION_ID_FORMAT, itemId, connection.getServiceName());
	}

	private void disconnectWhenUICloses(final XMPPConnection connection) {
		ui.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosed(WindowEvent e) {
				connection.disconnect();
			}
		});
	}

	private void startUserInterface() throws Exception {
		SwingUtilities.invokeAndWait(new Runnable() {
			public void run() {
				ui = new MainWindow(snipers);
			}
		});
	}

	public static class XMPPAuction implements Auction {
		private final Chat chat;

		public XMPPAuction(Chat chat) {
			this.chat = chat;
		}

		@Override
		public void bid(int amount) {
			sendMessage(String.format(BID_COMMAND_FORMAT, amount));
		}

		@Override
		public void join() {
			sendMessage(JOIN_COMMAND_FORMAT);
		}

		private void sendMessage(final String message) {
			try {
				chat.sendMessage(message);
			} catch (XMPPException e) {
				e.printStackTrace();
			}
		}
	}

	public class SwingThreadSniperListener implements SniperListener {

		SniperListener sniperListener;

		SwingThreadSniperListener(SniperListener listener) {
			this.sniperListener = listener;
		}

		@Override
		public void sniperStateChanged(SniperSnapshot state) {
			SwingUtilities.invokeLater(() -> sniperListener.sniperStateChanged(state));
		}

	}
}
